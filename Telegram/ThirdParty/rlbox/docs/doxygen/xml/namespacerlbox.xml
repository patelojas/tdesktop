<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacerlbox" kind="namespace" language="C++">
    <compoundname>rlbox</compoundname>
    <innerclass refid="classrlbox_1_1app__pointer" prot="public">rlbox::app_pointer</innerclass>
    <innerclass refid="classrlbox_1_1app__pointer__map" prot="public">rlbox::app_pointer_map</innerclass>
    <innerclass refid="classrlbox_1_1rlbox__noop__sandbox" prot="public">rlbox::rlbox_noop_sandbox</innerclass>
    <innerclass refid="structrlbox_1_1rlbox__noop__sandbox__thread__data" prot="public">rlbox::rlbox_noop_sandbox_thread_data</innerclass>
    <innerclass refid="classrlbox_1_1rlbox__sandbox" prot="public">rlbox::rlbox_sandbox</innerclass>
    <innerclass refid="classrlbox_1_1sandbox__callback" prot="public">rlbox::sandbox_callback</innerclass>
    <innerclass refid="classrlbox_1_1tainted" prot="public">rlbox::tainted</innerclass>
    <innerclass refid="classrlbox_1_1tainted__base__impl" prot="public">rlbox::tainted_base_impl</innerclass>
    <innerclass refid="classrlbox_1_1tainted__boolean__hint" prot="public">rlbox::tainted_boolean_hint</innerclass>
    <innerclass refid="classrlbox_1_1tainted__int__hint" prot="public">rlbox::tainted_int_hint</innerclass>
    <innerclass refid="classrlbox_1_1tainted__opaque" prot="public">rlbox::tainted_opaque</innerclass>
    <innerclass refid="classrlbox_1_1tainted__volatile" prot="public">rlbox::tainted_volatile</innerclass>
    <innernamespace refid="namespacerlbox_1_1callback__detail">rlbox::callback_detail</innernamespace>
    <innernamespace refid="namespacerlbox_1_1convert__fn__ptr__to__sandbox__equivalent__detail">rlbox::convert_fn_ptr_to_sandbox_equivalent_detail</innernamespace>
    <innernamespace refid="namespacerlbox_1_1detail">rlbox::detail</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rlbox_8hpp_1a8fe48bd08b952ec679b00341d96a92a3" prot="private" static="no">
        <type><ref refid="classrlbox_1_1tainted__base__impl" kindref="compound">tainted_base_impl</ref>&lt; <ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>, T, T_Sbx &gt;</type>
        <definition>using rlbox::T_ClassBase = typedef tainted_base_impl&lt;tainted, T, T_Sbx&gt;</definition>
        <argsstring></argsstring>
        <name>T_ClassBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="867" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rlbox_8hpp_1a3ee46589a2c37974ab418f39d7eb3cf2" prot="private" static="no">
        <type>tainted_detail::tainted_repr_t&lt; T, T_Sbx &gt;</type>
        <definition>using rlbox::T_AppType = typedef tainted_detail::tainted_repr_t&lt;T, T_Sbx&gt;</definition>
        <argsstring></argsstring>
        <name>T_AppType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="868" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rlbox_8hpp_1a05bcab5caa62c62da16ef2013e4ab004" prot="private" static="no">
        <type>tainted_detail::tainted_vol_repr_t&lt; T, T_Sbx &gt;</type>
        <definition>using rlbox::T_SandboxedType = typedef tainted_detail::tainted_vol_repr_t&lt;T, T_Sbx&gt;</definition>
        <argsstring></argsstring>
        <name>T_SandboxedType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="869" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="869" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="rlbox_8hpp_1aca5f0bb6b88053ae675bfb12ef3d27c4" prot="private" static="no" mutable="no">
        <type>T_AppType</type>
        <definition>T_AppType rlbox::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="870" column="13" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="870" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rlbox_8hpp_1a341a0f35f0f583144bd2cbf4cc2f701c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(+)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>+</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="757" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="757" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a1972fc855287b24964bcaab50d65e2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(-)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>-</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="758" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="758" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a288fd230c8d87eba5d9bc0ea9a28330d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BinaryOpWrappedRhs *</type>
        <definition>BinaryOpWrappedRhs* rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(/);BinaryOpWrappedRhs(%</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>/</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="759" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="759" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a192484cdecb4068a8d15695d4efe89e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BinaryOpWrappedRhs^</type>
        <definition>BinaryOpWrappedRhs^ rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(&amp;);BinaryOpWrappedRhs(|</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="762" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="762" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a9554c25732e3460818aa2be9378f0253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(&lt;&lt;)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>&lt;&lt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="765" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="765" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a44ffb8305bfc2eac8c597365e09703e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(&gt;&gt;)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>&gt;&gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="766" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="766" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a237eea4e6ab3d34cd07870051077cc55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(==)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="767" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="767" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a82be7cb64ac0ead60044d77cece674c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(!=)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>!</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="768" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="768" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a8ccbcf9aa2a9f57e0274db6392509661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(&lt;=)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="770" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="770" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a1fea4b3c5ef01a34946902032a8f0815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::BinaryOpWrappedRhs</definition>
        <argsstring>(&gt;=)</argsstring>
        <name>BinaryOpWrappedRhs</name>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="772" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="772" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a2f2515723978e189ea3e7524a76bcb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BooleanBinaryOpWrappedRhs &amp;&amp;</type>
        <definition>BooleanBinaryOpWrappedRhs&amp;&amp; rlbox::BooleanBinaryOpWrappedRhs</definition>
        <argsstring>(||);namespace tainted_detail { template&lt; typename T, typename T_Sbx &gt; using tainted_repr_t=detail::c_to_std_array_t&lt; T &gt;;template&lt; typename T, typename T_Sbx &gt; using tainted_vol_repr_t=detail::c_to_std_array_t&lt; std::add_volatile_t&lt; typename rlbox_sandbox&lt; T_Sbx &gt;::template convert_to_sandbox_equivalent_nonclass_t&lt; T &gt;&gt;&gt;;}template&lt; typename T, typename T_Sbx &gt;class tainted :public tainted_base_impl&lt; tainted, T, T_Sbx &gt;{ KEEP_CLASSES_FRIENDLY KEEP_CAST_FRIENDLY static_assert(!std::is_class_v&lt; T &gt;, &quot;Missing specialization for class T. This error occurs for one &quot; &quot;of 2 reasons.\n&quot; &quot;  1) Make sure you have include a call rlbox_load_structs_from_library &quot; &quot;for this library.\n&quot; &quot;  2) Make sure you run (re-run) the struct-dump tool to list &quot; &quot;all structs in use by your program.\n&quot;</argsstring>
        <name>BooleanBinaryOpWrappedRhs</name>
        <param>
          <type>||</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="827" column="1" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="827" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a042be348c8cbd337cfb5c8ed62630b4c" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; rlbox::get_raw_value_ref</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_raw_value_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="872" column="15" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="872" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a2ca5fe04e31b7a6c2112ba4b6bdcda32" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::remove_cv_t&lt; T_AppType &gt;</type>
        <definition>std::remove_cv_t&lt; T_AppType &gt; rlbox::get_raw_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_raw_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="875" column="27" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="875" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1aa6a0e6d6b4f68db642c3009c7e2f19a3" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::remove_cv_t&lt; T_SandboxedType &gt;</type>
        <definition>std::remove_cv_t&lt; T_SandboxedType &gt; rlbox::get_raw_sandbox_value</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox) const</argsstring>
        <name>get_raw_sandbox_value</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="880" column="27" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="880" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1ade70cda58c8fb5dec9c08daadb66f1bf" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* rlbox::find_example_pointer_or_null</definition>
        <argsstring>() const noexcept</argsstring>
        <name>find_example_pointer_or_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="905" column="21" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="905" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a2df559b14f4bdba18f9c979b60634d0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
            <defval>T</defval>
          </param>
          <param>
            <type>RLBOX_ENABLE_IF(std::is_pointer_v&lt; T2 &gt;)</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>(T2 val, const void *)</argsstring>
        <name>tainted</name>
        <param>
          <type>T2</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="925" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="925" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1ab3126c27bf188d96e49e38661638dafb" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T, T_Sbx &gt;</type>
        <definition>static tainted&lt;T, T_Sbx&gt; rlbox::internal_factory</definition>
        <argsstring>(T_Rhs &amp;&amp;rhs)</argsstring>
        <name>internal_factory</name>
        <param>
          <type>T_Rhs &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="933" column="25" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="933" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1ab400c59b608d730afa4e8fc2946674b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>()=default</argsstring>
        <name>tainted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="944" column="3" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="944" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a00c4940455f1949bf83e772f1725cc18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>(const tainted&lt; T, T_Sbx &gt; &amp;p)=default</argsstring>
        <name>tainted</name>
        <param>
          <type>const <ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T, T_Sbx &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="945" column="3" declfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" declline="945" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a8ddef7238bcfdba103eede0ada41715b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>(const tainted_volatile&lt; T, T_Sbx &gt; &amp;p)</argsstring>
        <name>tainted</name>
        <param>
          <type>const <ref refid="classrlbox_1_1tainted__volatile" kindref="compound">tainted_volatile</ref>&lt; T, T_Sbx &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="947" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="947" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a23f18d27b044f10a573f04762f7f3920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
            <defval>T</defval>
          </param>
          <param>
            <type>RLBOX_ENABLE_IF(std::is_pointer_v&lt; T2 &gt;)</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>(T2 val)</argsstring>
        <name>tainted</name>
        <param>
          <type>T2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="967" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="967" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a4a153138d9527c74d946b631694116fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>(const sandbox_callback&lt; detail::function_ptr_t&lt; T &gt;, T_Sbx &gt; &amp;)</argsstring>
        <name>tainted</name>
        <param>
          <type>const <ref refid="classrlbox_1_1sandbox__callback" kindref="compound">sandbox_callback</ref>&lt; detail::function_ptr_t&lt; T &gt;, T_Sbx &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="991" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="991" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a653e02e728fc675a8824bc435b17046f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>(const std::nullptr_t &amp;arg)</argsstring>
        <name>tainted</name>
        <param>
          <type>const std::nullptr_t &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="1012" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="1012" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a3789bdf95ffb970a1fe9c156f4bb8780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Arg</type>
          </param>
          <param>
            <type>RLBOX_ENABLE_IF( !detail::rlbox_is_wrapper_v&lt; std::remove_reference_t&lt; T_Arg &gt;&gt; &amp;&amp; detail::is_fundamental_or_enum_v&lt; T &gt; &amp;&amp; detail::is_fundamental_or_enum_v&lt; std::remove_reference_t&lt; T_Arg &gt;&gt;)</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rlbox::tainted</definition>
        <argsstring>(T_Arg &amp;&amp;arg)</argsstring>
        <name>tainted</name>
        <param>
          <type>T_Arg &amp;&amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="1027" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="1027" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a2ec7661baf99c0117fe25bb6bd07c1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Rhs</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void rlbox::assign_raw_pointer</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, T_Rhs val)</argsstring>
        <name>assign_raw_pointer</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>T_Rhs</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="1032" column="8" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="1032" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a755285d3d2ceccb8843722db458d9f57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrlbox_1_1tainted__opaque" kindref="compound">tainted_opaque</ref>&lt; T, T_Sbx &gt;</type>
        <definition>tainted_opaque&lt;T, T_Sbx&gt; rlbox::to_opaque</definition>
        <argsstring>()</argsstring>
        <name>to_opaque</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="1061" column="25" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="1061" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1afcaf47a959da23714cc4ec8b5a8bab71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Dummy</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>rlbox::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="1067" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="1067" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="rlbox_8hpp_1a7328c5d63ec45929e4842d951ab247fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename T_Sbx</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T, T_Sbx &gt;</type>
        <definition>tainted&lt;T, T_Sbx&gt; rlbox::from_opaque</definition>
        <argsstring>(tainted_opaque&lt; T, T_Sbx &gt; val)</argsstring>
        <name>from_opaque</name>
        <param>
          <type><ref refid="classrlbox_1_1tainted__opaque" kindref="compound">tainted_opaque</ref>&lt; T, T_Sbx &gt;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="1090" column="16" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" bodystart="1090" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1aac1552a010c926f4211a3b73d04fb23d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Lhs</type>
          </param>
          <param>
            <type>typename T_Rhs</type>
          </param>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>template&lt; typename, typename &gt; typename</type>
            <declname>T_Wrap</declname>
            <defname>T_Wrap</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T_Lhs, T_Sbx &gt;</type>
        <definition>tainted&lt;T_Lhs, T_Sbx&gt; rlbox::sandbox_reinterpret_cast</definition>
        <argsstring>(const T_Wrap&lt; T_Rhs, T_Sbx &gt; &amp;rhs) noexcept</argsstring>
        <name>sandbox_reinterpret_cast</name>
        <param>
          <type>const T_Wrap&lt; T_Rhs, T_Sbx &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The equivalent of a reinterpret_cast but operates on sandboxed values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="47" column="16" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="47" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1a449504c5212429fce9c27ab5535b4cef" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Lhs</type>
          </param>
          <param>
            <type>typename T_Rhs</type>
          </param>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>template&lt; typename, typename &gt; typename</type>
            <declname>T_Wrap</declname>
            <defname>T_Wrap</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T_Lhs, T_Sbx &gt;</type>
        <definition>tainted&lt;T_Lhs, T_Sbx&gt; rlbox::sandbox_const_cast</definition>
        <argsstring>(const T_Wrap&lt; T_Rhs, T_Sbx &gt; &amp;rhs) noexcept</argsstring>
        <name>sandbox_const_cast</name>
        <param>
          <type>const T_Wrap&lt; T_Rhs, T_Sbx &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The equivalent of a const_cast but operates on sandboxed values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="68" column="16" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="68" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1aa12ee34a239e9dac6ad8cafb7e859a6a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Lhs</type>
          </param>
          <param>
            <type>typename T_Rhs</type>
          </param>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>template&lt; typename, typename &gt; typename</type>
            <declname>T_Wrap</declname>
            <defname>T_Wrap</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T_Lhs, T_Sbx &gt;</type>
        <definition>tainted&lt;T_Lhs, T_Sbx&gt; rlbox::sandbox_static_cast</definition>
        <argsstring>(const T_Wrap&lt; T_Rhs, T_Sbx &gt; &amp;rhs) noexcept</argsstring>
        <name>sandbox_static_cast</name>
        <param>
          <type>const T_Wrap&lt; T_Rhs, T_Sbx &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The equivalent of a static_cast but operates on sandboxed values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="88" column="16" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="88" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1ae2491d69e8718e121cc6898dba56c97b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>typename T_Rhs</type>
          </param>
          <param>
            <type>typename T_Val</type>
          </param>
          <param>
            <type>typename T_Num</type>
          </param>
          <param>
            <type>template&lt; typename, typename &gt; typename</type>
            <declname>T_Wrap</declname>
            <defname>T_Wrap</defname>
          </param>
        </templateparamlist>
        <type>T_Wrap&lt; T_Rhs *, T_Sbx &gt;</type>
        <definition>T_Wrap&lt;T_Rhs*, T_Sbx&gt; rlbox::memset</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, T_Wrap&lt; T_Rhs *, T_Sbx &gt; ptr, T_Val value, T_Num num)</argsstring>
        <name>memset</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>T_Wrap&lt; T_Rhs *, T_Sbx &gt;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>T_Val</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T_Num</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Fill sandbox memory with a constant byte. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="109" column="15" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="109" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1a0b0d9db8aa78955e71974e5bf1545f3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>typename T_Rhs</type>
          </param>
          <param>
            <type>typename T_Lhs</type>
          </param>
          <param>
            <type>typename T_Num</type>
          </param>
          <param>
            <type>template&lt; typename, typename &gt; typename</type>
            <declname>T_Wrap</declname>
            <defname>T_Wrap</defname>
          </param>
        </templateparamlist>
        <type>T_Wrap&lt; T_Rhs *, T_Sbx &gt;</type>
        <definition>T_Wrap&lt;T_Rhs*, T_Sbx&gt; rlbox::memcpy</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, T_Wrap&lt; T_Rhs *, T_Sbx &gt; dest, T_Lhs src, T_Num num)</argsstring>
        <name>memcpy</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>T_Wrap&lt; T_Rhs *, T_Sbx &gt;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T_Lhs</type>
          <declname>src</declname>
        </param>
        <param>
          <type>T_Num</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Copy to sandbox memory area. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="141" column="15" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="141" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1a0c5e7d3bb1ea465aa5ef5388052208ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>typename T_Rhs</type>
          </param>
          <param>
            <type>typename T_Lhs</type>
          </param>
          <param>
            <type>typename T_Num</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted__int__hint" kindref="compound">tainted_int_hint</ref></type>
        <definition>tainted_int_hint rlbox::memcmp</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, T_Rhs &amp;&amp;dest, T_Lhs &amp;&amp;src, T_Num &amp;&amp;num)</argsstring>
        <name>memcmp</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>T_Rhs &amp;&amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>T_Lhs &amp;&amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>T_Num &amp;&amp;</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Compare data in sandbox memory area. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="175" column="25" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="175" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1a4ac0518a1c1de76f1f5498557949c7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T *, T_Sbx &gt;</type>
        <definition>tainted&lt;T*, T_Sbx&gt; rlbox::copy_memory_or_grant_access</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, T *src, size_t num, bool free_source_on_copy, bool &amp;copied)</argsstring>
        <name>copy_memory_or_grant_access</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>free_source_on_copy</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>copied</declname>
        </param>
        <briefdescription>
<para>This function either. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>copies the given buffer into the sandbox calling delete on the src OR</para>
</listitem><listitem><para>if the sandbox allows, adds the buffer to the existing sandbox memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sandbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Target sandbox </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw pointer to the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_source_on_copy</parametername>
</parameternamelist>
<parameterdescription>
<para>If the source buffer was copied, this variable controls whether copy_memory_or_grant_access should call delete on the src. This calls delete[] if num &gt; 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copied</parametername>
</parameternamelist>
<parameterdescription>
<para>out parameter indicating if the source was copied or transfered </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="217" column="9" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="217" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="rlbox__stdlib_8hpp_1a4ae75f35c4027a025b166e069cab385b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Sbx</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>template&lt; typename, typename &gt; typename</type>
            <declname>T_Wrap</declname>
            <defname>T_Wrap</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* rlbox::copy_memory_or_deny_access</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox, T_Wrap&lt; T *, T_Sbx &gt; src, size_t num, bool free_source_on_copy, bool &amp;copied)</argsstring>
        <name>copy_memory_or_deny_access</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <param>
          <type>T_Wrap&lt; T *, T_Sbx &gt;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>free_source_on_copy</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>copied</declname>
        </param>
        <briefdescription>
<para>This function either. </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>copies the given buffer out of the sandbox calling free_in_sandbox on the src OR</para>
</listitem><listitem><para>if the sandbox allows, moves the buffer out of existing sandbox memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sandbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Target sandbox </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw pointer to the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes in the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_source_on_copy</parametername>
</parameternamelist>
<parameterdescription>
<para>If the source buffer was copied, this variable controls whether copy_memory_or_grant_access should call delete on the src. This calls delete[] if num &gt; 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copied</parametername>
</parameternamelist>
<parameterdescription>
<para>out parameter indicating if the source was copied or transfered </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" line="266" column="3" bodyfile="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox_stdlib.hpp" bodystart="266" bodyend="298"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/shr/Code/LibrarySandboxing/rlbox_api_cpp17/code/include/rlbox.hpp" line="22" column="15"/>
  </compounddef>
</doxygen>
